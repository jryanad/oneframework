
// Core Mixins ------------ //

// Clearfix

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; 
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Peek-a-boo

@mixin show($display: block) {
  display: $display;
}

@mixin hidden() {
  display: none !important;
  visibility: hidden !important;
}

// Typography

@mixin uppercase { text-transform: uppercase; }

@mixin lowercase { text-transform: lowercase; }

@mixin italic { font-style: italic; }

@mixin no-decoration { text-decoration: none; }

@mixin decoration { text-decoration: underline; }

@mixin outline { outline: none; }

// Centered Content Block

@mixin centered-content-block () {
  margin-left: auto;
  margin-right: auto;
  display: table;
}

// Fixed Positioning

@mixin fx-position ($top, $right, $bottom, $left, $z-index) {
  position: fixed;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}

// Absolute Positioning

@mixin ab-position ($top, $right, $bottom, $left, $z-index) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $z-index;
}

// Relative Positioning

@mixin rel-position ($z-index) {
  position: relative;
  z-index: $z-index;
}

// Box Sizing

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// Box-Shadow

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
          box-shadow: $shadow;
}

// Borders

@mixin border($width, $style, $color) {
  border-width: $width;
  border-style: $style;
  border-color: $color;
}

// Border Radius

@mixin border-radius($radius...) {
  -webkit-border-radius: $radius;
          border-radius: $radius;
          background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-left-radius($radius) {
  -webkit-border-top-right-radius: $radius;
          border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
          border-top-left-radius: $radius;
          background-clip: padding-box;
}

@mixin border-top-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
          border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
          border-top-right-radius: $radius;
          background-clip: padding-box;
}

@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
          border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
          border-bottom-left-radius: $radius;
          background-clip: padding-box;
}

@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
          border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
          border-top-left-radius: $radius;
          background-clip: padding-box;
}

// Gradients

// Linear Gradient

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $fromColor;
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
  background-image:         linear-gradient(to bottom, $fromColor, $toColor);
  -ms-filter:       progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin linear-gradient-inverse($fromColor, $toColor) {
  background-color: $fromColor;
  background-image: -webkit-linear-gradient(bottom, $fromColor, $toColor);
  background-image:         linear-gradient(to top, $fromColor, $toColor);
  -ms-filter:       progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// Linear Pattern Gradient

@mixin pattern-linear-gradient($pattern, $fromColor, $toColor) {
  background-color: $fromColor;
  background-image: url($pattern); /* Fallback */
  background-image: url($pattern),   -webkit-linear-gradient(top, $fromColor, $toColor);
  background-image: url($pattern),   linear-gradient(to bottom, $fromColor, $toColor);
  -ms-filter:       progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin pattern-linear-gradient-inverse($pattern, $fromColor, $toColor) {
  background-color: $fromColor;
  background-image: url($pattern); /* Fallback */
  background-image: url($pattern),   -webkit-linear-gradient(bottom, $fromColor, $toColor);
  background-image: url($pattern),   linear-gradient(to top, $fromColor, $toColor);
  -ms-filter:       progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// CSS3 Transitions

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

// CSS3 Transformations

@mixin scale($ratio...) {
  -webkit-transform: scale($ratio);
  -ms-transform: scale($ratio);
  -o-transform: scale($ratio);
  transform: scale($ratio);
}

@mixin scaleX($ratio) {
  -webkit-transform: scaleX($ratio);
  -ms-transform: scaleX($ratio);
  -o-transform: scaleX($ratio);
  transform: scaleX($ratio);
}

@mixin scaleY($ratio) {
  -webkit-transform: scaleY($ratio);
  -ms-transform: scaleY($ratio);
  -o-transform: scaleY($ratio);
  transform: scaleY($ratio);
}

@mixin skew($x, $y) {
  -webkit-transform: skewX($x) skewY($y);
  -ms-transform: skewX($x) skewY($y); 
  -o-transform: skewX($x) skewY($y);
  transform: skewX($x) skewY($y);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  transform: translate($x, $y);
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  transform: rotate($degrees);
}

@mixin rotateX($degrees) {
  -webkit-transform: rotateX($degrees);
  -ms-transform: rotateX($degrees);
  -o-transform: rotateX($degrees);
  transform: rotateX($degrees);
}

@mixin rotateY($degrees) {
  -webkit-transform: rotateY($degrees);
  -ms-transform: rotateY($degrees);
  -o-transform: rotateY($degrees);
  transform: rotateY($degrees);
}

@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  perspective: $perspective;
}

@mixin perspective-origin($perspective) {
  -webkit-perspective-origin: $perspective;
  -moz-perspective-origin: $perspective;
  perspective-origin: $perspective;
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

// Placeholder text

@mixin placeholder($color: $base-input-border-color) {
    // Firefox
    &::-moz-placeholder {
    color: darken($color, 20%);
    opacity: 1;
  }
  &:-ms-input-placeholder      { color: darken($color, 20%); } // Internet Explorer 10+
  &::-webkit-input-placeholder { color: darken($color, 20%); } // Safari and Chrome
}

// Opacity

@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: alpha(opacity=$opacity-ie);
}

